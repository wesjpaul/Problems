/*
 *  Author: Wesley Paul
 *  Date: August 10, 2014
 * 
 */

package Problems;

import java.util.ArrayList;
import java.util.List;

/*
 * 
 * Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first 
 * ten pentagonal numbers are:
 *	
 *	1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *	
 *	It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their 
 *	difference, 70 - 22 = 48, is not pentagonal.
 *	
 *	Find the pair of pentagonal numbers, Pj and Pk, for which their sum 
 *	and difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?
 *
 *	Source: https://projecteuler.net/
 */

public class PentegonalNumbers {
	
	private final static int MAXTIME = 100000;
	
	public static int runPentegonalNumbers(){
		int j = 1, k;
		int sum, diff;
		List<Integer> numbers = new ArrayList<Integer>();
		
		// Since it is not known how long it will take, set MAXTIME as a safety.
		while(j < MAXTIME){
			
			// Add a new pentegonal number to the list
			numbers.add(getPentegonalNumber(j));
			
			// Loop through the list to check if this new number adds or subtracts with
			// any of the others to create another pentegonal number
			for(k = 0; k < numbers.size(); k++){
				
				// Using the sum of two numbers check if it is a pentegonal number
				sum = reversePentegonalNumber(numbers.get(j-1)+numbers.get(k));
				if(sum > 0){
					
					// Using the difference of two numbers check if it is a pentegonal number
					diff = reversePentegonalNumber(numbers.get(j-1)-numbers.get(k));
					if(diff > 0)
						// If both the sum and difference of two numbers was pentegonal return the difference
						return numbers.get(j-1)-numbers.get(k);
				}
					
			}
			j++;
		}
		return 0;
	}
	
	// Returns the PentegonalNumber of an input index
	private static int getPentegonalNumber(int i){
		return i*(3*i - 1)/2;
	}
	
	// Reverses a Pentegonal Number and returns its index.
	// If the input number is not Pentegonal it returns -1.
	private static int reversePentegonalNumber(int n){
		// 0 = 3i^2 - i + 2n
		
		double root1, root2;
		int a = 3, b = -1, c = -2*n;
		
		root1 = (double) ((-1*b + Math.sqrt(b*b - 4*a*c))/(2*a));
		root2 = (double) ((-1*b - Math.sqrt(b*b - 4*a*c))/(2*a));
		if((root1 > 0) && (root1 % 1 == 0)){
			return (int)root1;
		}
		if((root2 > 0) && (root2 % 1 == 0)){
			return (int)root2;
		}
		
		return -1;
	}
	
}
